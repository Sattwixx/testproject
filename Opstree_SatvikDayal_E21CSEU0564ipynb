{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPKU9py5WbgRer2yoyPCVeW",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Sattwixx/testproject/blob/main/Opstree_SatvikDayal_E21CSEU0564ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WI2f-n0ocMDg",
        "outputId": "a493a9bc-67e6-447f-8e55-23d3114cd861"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "First number as linked list:\n",
            "1 -> 2 -> 3\n",
            "Second number as linked list:\n",
            "4 -> 5 -> 6\n",
            "Addition result as linked list:\n",
            "5 -> 7 -> 9\n",
            "Subtraction result as linked list:\n",
            "7 -> 6 -> 6\n",
            "Multiplication result as linked list:\n",
            "5 -> 6 -> 0 -> 8 -> 8\n"
          ]
        }
      ],
      "source": [
        "class ListNode:\n",
        "    def __init__(self, value=0, next=None):\n",
        "        self.value = value\n",
        "        self.next = next\n",
        "\n",
        "class LinkedList:\n",
        "    def __init__(self):\n",
        "        self.head = None\n",
        "\n",
        "    def insert(self, value):\n",
        "        new_node = ListNode(value)\n",
        "        if not self.head:\n",
        "            self.head = new_node\n",
        "        else:\n",
        "            current = self.head\n",
        "            while current.next:\n",
        "                current = current.next\n",
        "            current.next = new_node\n",
        "\n",
        "    def to_list(self):\n",
        "        elements = []\n",
        "        current = self.head\n",
        "        while current:\n",
        "            elements.append(current.value)\n",
        "            current = current.next\n",
        "        return elements\n",
        "\n",
        "    def print_list(self):\n",
        "        elements = self.to_list()\n",
        "        print(\" -> \".join(map(str, elements)))\n",
        "\n",
        "def add_linked_lists(l1, l2):\n",
        "    dummy_head = ListNode()\n",
        "    current = dummy_head\n",
        "    carry = 0\n",
        "\n",
        "    while l1 or l2 or carry:\n",
        "        val1 = l1.value if l1 else 0\n",
        "        val2 = l2.value if l2 else 0\n",
        "\n",
        "        total = val1 + val2 + carry\n",
        "        carry = total // 10\n",
        "        current.next = ListNode(total % 10)\n",
        "        current = current.next\n",
        "\n",
        "        if l1: l1 = l1.next\n",
        "        if l2: l2 = l2.next\n",
        "\n",
        "    return dummy_head.next\n",
        "\n",
        "def subtract_linked_lists(l1, l2):\n",
        "    dummy_head = ListNode()\n",
        "    current = dummy_head\n",
        "    borrow = 0\n",
        "\n",
        "    while l1 or l2:\n",
        "        val1 = l1.value if l1 else 0\n",
        "        val2 = l2.value if l2 else 0\n",
        "\n",
        "        difference = val1 - borrow - val2\n",
        "        if difference < 0:\n",
        "            difference += 10\n",
        "            borrow = 1\n",
        "        else:\n",
        "            borrow = 0\n",
        "\n",
        "        current.next = ListNode(difference)\n",
        "        current = current.next\n",
        "\n",
        "        if l1: l1 = l1.next\n",
        "        if l2: l2 = l2.next\n",
        "\n",
        "    return dummy_head.next\n",
        "\n",
        "def multiply_linked_lists(l1, l2):\n",
        "    num1 = 0\n",
        "    num2 = 0\n",
        "\n",
        "    while l1:\n",
        "        num1 = num1 * 10 + l1.value\n",
        "        l1 = l1.next\n",
        "\n",
        "    while l2:\n",
        "        num2 = num2 * 10 + l2.value\n",
        "        l2 = l2.next\n",
        "\n",
        "    product = num1 * num2\n",
        "\n",
        "    dummy_head = ListNode()\n",
        "    current = dummy_head\n",
        "\n",
        "    if product == 0:\n",
        "        return ListNode(0)\n",
        "\n",
        "    while product:\n",
        "        current.next = ListNode(product % 10)\n",
        "        product //= 10\n",
        "        current = current.next\n",
        "\n",
        "    return reverse_linked_list(dummy_head.next)\n",
        "\n",
        "def reverse_linked_list(head):\n",
        "    prev = None\n",
        "    current = head\n",
        "\n",
        "    while current:\n",
        "        next_node = current.next\n",
        "        current.next = prev\n",
        "        prev = current\n",
        "        current = next_node\n",
        "\n",
        "    return prev\n",
        "\n",
        "def create_linked_list_from_number(num):\n",
        "    ll = LinkedList()\n",
        "    for digit in str(num):\n",
        "        ll.insert(int(digit))\n",
        "    return ll.head\n",
        "\n",
        "# Example:\n",
        "num1 = 123\n",
        "num2 = 456\n",
        "\n",
        "l1 = create_linked_list_from_number(num1)\n",
        "l2 = create_linked_list_from_number(num2)\n",
        "\n",
        "\n",
        "ll1 = LinkedList()\n",
        "ll1.head = l1\n",
        "print(\"First number as linked list:\")\n",
        "ll1.print_list()\n",
        "\n",
        "ll2 = LinkedList()\n",
        "ll2.head = l2\n",
        "print(\"Second number as linked list:\")\n",
        "ll2.print_list()\n",
        "\n",
        "\n",
        "result_add = add_linked_lists(l1, l2)\n",
        "ll_result_add = LinkedList()\n",
        "ll_result_add.head = result_add\n",
        "print(\"Addition result as linked list:\")\n",
        "ll_result_add.print_list()\n",
        "\n",
        "\n",
        "result_sub = subtract_linked_lists(l1, l2)\n",
        "ll_result_sub = LinkedList()\n",
        "ll_result_sub.head = result_sub\n",
        "print(\"Subtraction result as linked list:\")\n",
        "ll_result_sub.print_list()\n",
        "\n",
        "\n",
        "result_mul = multiply_linked_lists(l1, l2)\n",
        "ll_result_mul = LinkedList()\n",
        "ll_result_mul.head = result_mul\n",
        "print(\"Multiplication result as linked list:\")\n",
        "ll_result_mul.print_list()\n"
      ]
    }
  ]
}